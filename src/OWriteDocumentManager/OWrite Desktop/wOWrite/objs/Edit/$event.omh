On evPaperChanged
	Send to trace log {[pDocHeight] - [pY]}
On evSelChanged
	;  see if we need to open the header/footer tools palette     ;; CHANGE_V3A7 begins
	Calculate $cfield.$curobjcontainer as kTrue     ;; make sure $curobj... properties return info for the current container, not selected object
	If ivLastObjIdent<>$cfield.$curobjid
		Calculate ivLastObjIdent as $cfield.$curobjid
		Do method curObjChanged ($cfield.$curobjid)
	End If
	Calculate $cfield.$curobjcontainer as kFalse     ;; CHANGE_V3A7 begins
	;  redraw the status bar with current page number and page count
	Calculate $cinst.$statusbar.$panes.1.$text as con("Page ",ivEdit.$pagenumber," of ",ivEdit.$::pagecount)
On evFormatChanged
	If ivWRefTools     ;; avoids notation errors
		Do ivWRefTools.$formatChanged
	End If
On evStylesChanged
	If ivWRefTools     ;; avoids notation errors
		Do ivWRefTools.$stylesChanged
	End If
On evContextSpell
	;  context click on misspelled word
	;  pList will contain the suggested words
	Calculate wordCount as pList.$linecount
	If not(wordCount)
		Do pList.$add('No suggestion')
	End If
	;  add additional options
	Do pList.$add('')
	Do pList.$add('Ignore')
	Do pList.$add('Ignore all')
	Do pList.$add('Add')
	;  popup our menu at the given location
	Popup menu from list $root.pList at pX,pY
	If not(pList.$line)     ;; do nothing
	Else If pList.$line<=wordCount
		;  a word has been selected, replace
		Do ivEdit.$startundo()
		Do ivEdit.$::insert(kWriObjTypeText,pList.Word)
		Do ivEdit.$endundo("Correct Spelling")
	Else
		;  one of the other options has been picked
		If not(wordCount)
			Calculate wordCount as 1     ;; account for 'No suggestion'
		End If
		Switch pList.$line-wordCount
			Case 2     ;; Ignore
				Do ivEdit.$spell(kWriSpllIgnoreWord)
			Case 3     ;; Ignore all - Note: Tell OWrite and add word to ignore dictionary
				Do ivEdit.$spell(kWriSpllIgnoreAll)
				Do Spll.$addword(Spll.$getignorelexid(),ivSpllSession.$badword,'',kSpllActIgnore)
			Case 4     ;; Add - Note: Add word to user dictionary and tell OWrite to ignore it
				Do ivEdit.$spell(kWriSpllIgnoreAll)
				Do Spll.$addword(0,ivSpllSession.$badword,'',kSpllActIgnore)
		End Switch
	End If
On evContextObject
	;  context click on an object, popup our format menu
	Do method popupContextMenu
On evContextText
	;  context click on text, popup our format menu
	Do method popupContextMenu
On evObjClick     ;; change20190520_1
	;  clickable calculated fields with invalid omnis calculations come here
	If pos("http",pObjCalc)
		Do $cinst.$openurl(eval(pObjCalc))     ;; eval removes quotes
	End If
On evPasteFF
	Do method pasteFromFile
On evDoubleClick
	Do method $formatcurobj
On evCanDrop
	Switch pDragType
		Case kDragFiles
			Quit event handler (Pass to next handler)
		Default
			If pDragField().$name='iFieldList'
				Quit event handler
			Else
				Quit event handler (Discard event)
			End If
	End Switch
On evDrop
	Switch pDragType
		Case kDragFiles
			Calculate lst as pDragValue
			For lst.$line from 1 to lst.$linecount step 1
				Do method importData (lst.C1,append)
				Calculate append as kTrue
			End For
		Default
			Do $cfield.$getselection(selStart,selEnd,selObjID,kWriSRMouse)
			Do $cfield.$setselection(selStart,selEnd,selObjID)
			Do pDragField.$doDrop($cfield)
	End Switch
On evMultiFind     ;; CHANGE_V3A10
	;  tell search panel that search selection has changed
	Do $cinst.$objs.FindPanel.$selectionChanged(pSelectionShown)
On evProgress     ;; CHANGE_2014_07_04__1 begins
	;  show progress of current operation (loading, saving, importing, exporting or printing)
	;  this is helpfull when dealing with larger documents (100 pages+)
	If tvStudio5     ;; only do this for Studio 5 or better as using the statusbar progress bar causes instabilities in Studio 4.3.x
		Switch pProgressType
			Case kWriProgressFinish,kWriProgressCancel
				If $cinst.$statusbar.$panes.2.$isprogress
					Calculate $cinst.$statusbar.$panes.2.$value as 0
					Calculate $cinst.$statusbar.$panes.2.$text as ''
					Calculate $cinst.$statusbar.$panes.2.$isprogress as kFalse
				End If
			Default
				If not($cinst.$statusbar.$panes.2.$isprogress)
					Calculate $cinst.$statusbar.$panes.2.$isprogress as kTrue
					Calculate $cinst.$statusbar.$panes.2.$text as pick(pProgressType,'','Loading Document','Saving Document','Importing Document','Exporting Document','Formatting','Printing')
					Calculate $cinst.$statusbar.$panes.2.$backcolor as kDarkGray
					Calculate $cinst.$statusbar.$panes.2.$min as 1
					Calculate $cinst.$statusbar.$panes.2.$max as 100
				End If
				Calculate $cinst.$statusbar.$panes.2.$value as pProgressPercent
		End Switch
	Else
		;  Studio 4 alternative
		Switch pProgressType
			Case kWriProgressFinish,kWriProgressCancel
				If $cinst.$objs.ProgressBar.$visible
					Calculate $cinst.$objs.ProgressBar.$visible as kFalse
				End If
				Queue set current field {Edit}
			Default
				If not($cinst.$objs.ProgressBar.$visible)
					Calculate $cinst.$objs.ProgressBar.$visible as kTrue
				End If
				Calculate $cinst.$objs.ProgressBar.$val as pProgressPercent
		End Switch
	End If
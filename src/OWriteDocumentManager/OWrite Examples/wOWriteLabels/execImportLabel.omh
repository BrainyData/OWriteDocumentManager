Do FileOps.$splitpathname($clib.$pathname,DRIVE,DIR,NAME,EXT)
Calculate LocalPath as con(DRIVE,DIR,"Label Templates")

If sys(6)='M'|sys(6)='X'
	Do FileOps.$getfilename(lTheFileName,"Please select the label template you would like to import","Rich Text Format (*.rtf)|*.rtf",LocalPath) Returns lResult
Else
	Do FileOps.$getfilename(lTheFileName,"Please select the label template you would like to import","Rich Text Format (*.rtf)|*.rtf",LocalPath) Returns lResult
End If
If not(lResult)
	Do $cinst.$displayError(kFalse,'Import Cancelled')
	Quit method kFalse
End If

Do lTheFile.$openfile(lTheFileName,kTrue)
Do lTheFile.$readfile(lImportData)
Do lTheFile.$closefile()
Do FileOps.$splitpathname(lTheFileName,DRIVE,DIR,NAME,EXT)

Do refPreview.$loaddata(lImportData,kWriFmtRTF) Returns lError
If not(lError)
	Do $cinst.$displayError('Template Imported')
Else
	Do $cinst.$displayError('File import failed')
	Quit method kFalse
End If

;  get preoperties from document and transfer to our label options

;  load paper and margins
Calculate cInfoED.PaperType as refPreview.$::paper
Calculate cInfoED.PaperWidth as refPreview.$::paperwidth
Calculate cInfoED.PaperHeight as refPreview.$::paperlength
Calculate cInfoED.PaperOrient as refPreview.$::orientation-1
Calculate cInfoED.PaperMarginLeft as refPreview.$::leftmargin
Calculate cInfoED.PaperMarginTop as refPreview.$::topmargin
Calculate cInfoED.PaperMarginRight as refPreview.$::rightmargin
Calculate cInfoED.PaperMarginBottom as refPreview.$::bottommargin     ;; no need to have a bottom margin, solves issues with last row

;  get list of table cells so we can analyze them
Do list.$define(objType,objIdent,objFirstSel,objLastSel,objName)
Do refPreview.$getobjslist(list,kWriObjTypeTableCell)
;  step thru the cells and work out label/gutter sizes, labels across/down, etc
Calculate cInfoED.LabelsAcross as 0
Calculate cInfoED.LabelsDown as 0
Calculate cInfoED.LabelGutterVert as 0
Calculate cInfoED.LabelGutterHorz as 0
For list.$line from 1 to list.$linecount step 1
	Do refPreview.$setselection(0,0,list.objIdent)
	If refPreview.$firstselrow=1     ;; some things we only do with the first row
		If refPreview.$firstselcol=1
			;  the first cell will give us our cell width and height
			Calculate cInfoED.LabelHeight as rnd(refPreview.$curobjheight,2)
			Calculate cInfoED.LabelWidth as rnd(refPreview.$curobjwidth,2)
		Else If refPreview.$firstselcol=2&rnd(refPreview.$curobjwidth,2)<rnd(cInfoED.LabelWidth,2)
			;  the second cell will tells us we have a vertical gutter if it is smaller
			Calculate cInfoED.LabelGutterHorz as rnd(refPreview.$curobjwidth,2)
		End If
	Else If refPreview.$firstselrow=2&rnd(refPreview.$curobjheight,2)<rnd(cInfoED.LabelHeight,2)
		;  the second row tells us if we have a horizontal gutter
		Calculate cInfoED.LabelGutterVert as rnd(refPreview.$curobjheight,2)
	End If
	;  update labels across/down     ;; we will need to subtract gutters later on
	If refPreview.$firstselcol>cInfoED.LabelsAcross
		Calculate cInfoED.LabelsAcross as refPreview.$firstselcol
	End If
	If refPreview.$firstselrow>cInfoED.LabelsDown
		Calculate cInfoED.LabelsDown as refPreview.$firstselrow
	End If
End For
;  subtract gutters from our count
If cInfoED.LabelGutterHorz
	Calculate cInfoED.LabelsAcross as cInfoED.LabelsAcross-int(cInfoED.LabelsAcross/2)
End If
If cInfoED.LabelGutterVert
	Calculate cInfoED.LabelsDown as cInfoED.LabelsDown-int(cInfoED.LabelsDown/2)
End If

Calculate cInfoED.LabelType as NAME
Calculate cInfo as cInfoED

;  update our labels list
Do method addLabel (NAME,cInfoED)

Do $cinst.$setButtons()
Do $cinst.$redraw()
Do method previewRebuild
Do method previewScale
;  save data of the current selected object
;  if pNoPrompt is kTrue, we always save
If ivEdit.$modified|pNoPrompt
	If pNoPrompt
		Calculate #F as kTrue
	Else
		If ivLoadedSeq=0
			Calculate prompt as "Would you like to save the new document before you continue?//If you answer 'No' the document is discarded."
			Yes/No message Save New Document? (Cancel button) {[prompt]}
		Else
			Calculate prompt as "Would you like to save your changes before you continue?//If you answer 'No' all changes that you made since the last time you saved will be discarded."
			Yes/No message Save Changes? (Cancel button) {[prompt]}
		End If
		If msgcancelled()
			Quit method kFalse
		End If
	End If
	If flag true
		Set main file {fOWriteDoc}
		Single file find on fOWriteDoc.seq (Exact match) {ivLoadedSeq}
		If flag false
			Calculate name as ivLoadedName
			Calculate group as ivGroupList.group
			Do method newDocumentName (name,group)
			If len(name)=0
				Calculate ivDocumentsList.$line as 0
				Redraw {DocumentList}
				Quit method kFalse
			End If
			Find last on fOWriteDoc.order
			Calculate order as fOWriteDoc.order+1
			Prepare for insert
			Calculate fOWriteDoc.order as order
			Calculate fOWriteDoc.name as name
			Calculate fOWriteDoc.group as group
		Else
			Prepare for edit
			;  always update the name, it may have been changed by rename
			Calculate fOWriteDoc.name as ivLoadedName
		End If
		If ivIsListData
			Do ivEdit.$savedata(fOWriteDoc.listData,kWriSaveAsList,kTrue,kWriSaveRawPicts,kTrue)
		Else
			Do ivEdit.$savedata(fOWriteDoc.data)
		End If
		Update files
		If order     ;; we have inserted a new document, rebuild the documents list
			Calculate ivLoadedSeq as fOWriteDoc.seq
			Calculate ivLoadedName as fOWriteDoc.name
			Do method loadGroupList (group,fOWriteDoc.seq)
		End If
	End If
End If
Quit method kTrue
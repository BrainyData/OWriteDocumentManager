Send to trace log {$serverSaveData called}
If len(ivOWriteDebug1)
	Do FileOps.$splitpathname($clib.$pathname,%%DriveName,%%DirectoryName,%%FileName,%%FileExtension)
	Do file.$createfile(con(%%DriveName,%%DirectoryName,"Debug1.txt"))
	Do file.$writefile(chartoutf8(ivOWriteDebug1))
	Do file.$closefile()
	Do file.$createfile(con(%%DriveName,%%DirectoryName,"Debug2.txt"))
	Do file.$writefile(chartoutf8(ivOWriteDebug2))
	Do file.$closefile()
End If
If pIsEvaluated
	;  evaluated documents are saved as a copy of the original
	;  create a new entry if necesarry
	Find last on fOWriteDoc.order
	Calculate %order as fOWriteDoc.order+1
	
	Calculate nameForCopy as con("evaluated (",jst(#D,"D:Dmy H:N.S"),")")
	Set search as calculation {fOWriteDoc.name=nameForCopy&fOWriteDoc.group=ivGroupList.group}
	Find first  (Use search)
	If flag false
		Do ivDocumentList.$add(nameForCopy)
		Calculate ivDocumentList.$line as ivDocumentList.$linecount
		Prepare for insert
		Calculate fOWriteDoc.name as nameForCopy
		Calculate fOWriteDoc.group as ivGroupList.group
		Calculate fOWriteDoc.order as %order
		Calculate fOWriteDoc.data as #NULL
	Else
		Do ivDocumentList.$search($ref.name=nameForCopy,kTrue,kFalse,kFalse,kFalse) Returns ivDocumentList.$line
		Prepare for edit
	End If
	Calculate fOWriteDoc.listData as ivDocumentData     ;; Note: fOWriteDoc.listDate is the v4 converted data sructure suitable for JS Client use, fOWriteDoc.data holds the original unconverted binary.
	Update files
Else
	Set search as calculation {fOWriteDoc.name=ivDocumentList.name&fOWriteDoc.group=ivGroupList.group}
	Find first  (Use search)
	If flag true
		Prepare for edit
		Calculate fOWriteDoc.listData as ivDocumentData     ;; Note: fOWriteDoc.listDate is the v4 converted data sructure suitable for JS Client use, fOWriteDoc.data holds the original unconverted binary.
		Update files
	End If
End If